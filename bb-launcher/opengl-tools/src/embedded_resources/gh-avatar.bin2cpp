/**
 * This file was generated by bin2cpp v3.0.0
 * Copyright (C) 2013-2021 end2endzone.com. All rights reserved.
 * bin2cpp is open source software, see http://github.com/end2endzone/bin2cpp
 * Source code for file 'gh-avatar.png', last modified 1713533854.
 * Do not modify this file.
 */
#if defined(_WIN32) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif
#include "gh-avatar.h"
#include <string> //for std::string
#include <iostream>
#include <fstream>  //for ofstream
namespace bin2cpp
{
  class GhavatarPngFile : public virtual bin2cpp::File
  {
  public:
    GhavatarPngFile() { build(); }
    virtual ~GhavatarPngFile() {}
    virtual size_t getSize() const { return 1553; }
    virtual const char * getFileName() const { return "gh-avatar.png"; }
    virtual const char * getFilePath() const { return getFileName(); }
    virtual const char * getBuffer() const { return mBuffer.c_str(); }
    void build()
    {
      mBuffer.clear();
      mBuffer.reserve(getSize()); //allocate all required memory at once to prevent reallocations
      mBuffer.append("\211PNG\r\n\032\n\0\0\0\rIHDR\0\0\001\244\0\0\001\244\b\002\0\0\0\361.\306b\0\0\005\330IDATx\234\354\327\301\t\3340\0\005\321lp%\256\301\035\271.w\344\032\\\203J\310a!\220S.\273V\234y\257\001}\020\f\3222\306\370\001\360\277\3739{\0\300\035\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016", 200);
      mBuffer.append("HXn;\351\334\257\333\316\002\036d
      mBuffer.append
      mBuffer.append("\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\204e\366\200g\333\216u\366\204O:\367k\366\204\317sG\274y\331\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb", 200);
      mBuffer.append("\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\3022{\300\263\235\3735{\002\177\341\216x\023;\376\260\035\353\354\t\237\244t\374\346\033\v$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@", 200);
      mBuffer.append("\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\tb\a$\210\035\220 v@\202\330\001\t\313\354\001\374[\316\375\232=\001\276\3425\306\230\275\341\251t\201)\266c\235=\341\221|c\201\004\261\003\022\304\016H\020; ", 200);
      mBuffer.append
      mBuffer.append("\003\022\304\016H\020; A\354\200\204\327\030c\366\006\200\257\363\262\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022\304\016H\020; A\354\200\004\261\003\022~\005\0\0\377\377\307D \352\357\232w\020\0\0\0\0IEND\256B`\202", 153);
    }
    virtual bool save(const char * filename) const
    {
      std::ofstream f(filename, std::ios::out | std::ios::binary | std::ios::trunc);
      if (f.fail()) return false;
      size_t fileSize = getSize();
      const char * buffer = getBuffer();
      f.write(buffer, fileSize);
      f.close();
      return true;
    }
  private:
    std::string mBuffer;
  };
  const File & getGhavatarPngFile() { static GhavatarPngFile _instance; return _instance; }
}; //bin2cpp
